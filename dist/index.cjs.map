{"version":3,"sources":["../src/index.ts","../src/classes/barrel.ts"],"sourcesContent":["import { BarrelInterface } from './interfaces/barrel';\r\nexport type { BarrelInterface }\r\nimport Barrel from './classes/barrel';\r\nexport { Barrel as Barrel }","import { Malt } from 'adtap-network-malt';\r\nimport fs, { constants } from 'fs';\r\nimport path from 'path';\r\nimport os, { networkInterfaces } from 'os';\r\nimport { Readable } from 'stream';\r\nimport sharp from 'sharp';\r\nimport { access } from 'fs/promises';\r\nimport QRCode from 'qrcode';\r\n\r\nexport default class Barrel extends Malt {\r\n\r\n    constructor(o: {[key: string]: any}) {\r\n        super(o);\r\n    }\r\n    \r\n    async fileExists(filePath: string): Promise<boolean> {\r\n        try { await access(filePath, constants.F_OK); return true; }\r\n        catch { return false; }\r\n    }\r\n\r\n    async generateQRCode(u: string): Promise<string> {\r\n        try { const pngData = await QRCode.toDataURL(u, { errorCorrectionLevel: 'H', margin: 4, color: { dark: 'black', light: 'white' }}); return pngData; } \r\n        catch (error) { console.error('Error generating QR code:', error); return ''; }\r\n    }\r\n\r\n    getCurrentUrl(req: any): string {\r\n        let pageUrl = 'http';\r\n        if (req.headers['x-forwarded-proto'] === 'https') {\r\n            pageUrl = 'https';\r\n        }\r\n        pageUrl += '://';\r\n        const host = req.headers['host'];\r\n        const requestUri = req.url || '';\r\n        if (req.headers['x-forwarded-port'] && req.headers['x-forwarded-port'] !== '80') { pageUrl += `${host}:${req.headers['x-forwarded-port']}${requestUri}`; } \r\n        else { pageUrl += `${host}${requestUri}`; }\r\n        return pageUrl;\r\n    }\r\n\r\n    getEnvironmentVariable(k: string): string { const v = process.env[k] || ''; return v; }\r\n\r\n    getLocalHostname(): string { return os.hostname(); }\r\n    \r\n    getLocalIp4(): string | undefined { const interfaces = networkInterfaces(); for (const interfaceName in interfaces) { if (Object.hasOwnProperty.call(interfaces, interfaceName)) { const networkInterface = interfaces[interfaceName]; for (const net of networkInterface!) { if (net.family === 'IPv4' && !net.internal) { return net.address; } } } } return undefined; }\r\n\r\n    getLocalSeparator(): string { return path.sep; }\r\n\r\n    getProjectRoot(): string {\r\n        let currentDir = process.cwd();\r\n        while (!fs.existsSync(path.join(currentDir, 'node_modules'))) {\r\n            const parentDir = path.dirname(currentDir);\r\n            if (parentDir === currentDir) {\r\n                throw new Error('Project root not found (no node_modules directory)');\r\n            }\r\n            currentDir = parentDir;\r\n        }\r\n        return currentDir;\r\n    }\r\n\r\n    getProjectFolder(): string { return path.basename(this.getProjectRoot()); }\r\n\r\n    getRequestBody(): Promise<Readable> {\r\n        return new Promise((resolve, reject) => {\r\n          const requestBody: Buffer[] = [];    \r\n          process.stdin.on('data', (chunk: Buffer) => requestBody.push(chunk));\r\n          process.stdin.on('end', () => {\r\n            const bodyStream = Readable.from(requestBody);\r\n            resolve(bodyStream);\r\n          });\r\n          process.stdin.on('error', (err) => reject(err));\r\n        });\r\n    }\r\n\r\n    getRequestMethod() { return this.getServerValue('REQUEST_METHOD'); }\r\n  \r\n    getRequestPort(): string { return this.getServerValue('SERVER_PORT'); }\r\n  \r\n    getRequestUri() { return this.getServerValue('REQUEST_URI'); }\r\n  \r\n    getServerArray(): { [key: string]: string } { return Object.fromEntries( Object.entries(process.env).filter( ([, value]) => value !== undefined) ) as { [key: string]: string }; }\r\n  \r\n    getServerValue(key: string): string { return process.env[key] || ''; }\r\n  \r\n    async httpGet(url: string): Promise<{ content: string, headers: string[] }> { const response = await fetch(url); const content = await response.text(); const headers = [...response.headers.keys()]; return { content, headers }; }\r\n\r\n    listDirectoryFiles(directory: string): string[] {\r\n        const files: string[] = [];\r\n        const items = fs.readdirSync(directory);    \r\n        items.forEach((item) => {\r\n          const fullPath = path.join(directory, item);\r\n          if (fs.statSync(fullPath).isFile()) { files.push(item); }\r\n        });    \r\n        return files;\r\n    }\r\n\r\n    async makeThumbnailFromString(p: string, t: 'png' | 'jpg' | 'gif' = 'png', r: number = 0.2): Promise<string> {\r\n        const imageBuffer = Buffer.from(p, 'base64');    \r\n        try {\r\n          const resizedBuffer = await sharp(imageBuffer).resize({ width: Math.round(150 * r), height: Math.round(150 * r) }).toBuffer();\r\n          let resultBase64 = '';\r\n          if (t === 'gif') { resultBase64 = (await sharp(resizedBuffer).gif().toBuffer()).toString('base64'); resultBase64 = 'data:image/gif;base64,' + resultBase64; }\r\n          else if (t === 'jpg') { resultBase64 = (await sharp(resizedBuffer).jpeg().toBuffer()).toString('base64'); resultBase64 = 'data:image/jpeg;base64,' + resultBase64; }\r\n          else { resultBase64 = (await sharp(resizedBuffer).png().toBuffer()).toString('base64'); resultBase64 = 'data:image/png;base64,' + resultBase64; }\r\n          return resultBase64;\r\n        }\r\n        catch (err) { console.error('Error processing image', err); return ''; }\r\n    }\r\n\r\n    async readFile(filePath: string): Promise<string> {\r\n        try {\r\n          const data = fs.readFileSync(filePath, 'utf8');\r\n          return data;\r\n        } \r\n        catch (error) {\r\n          console.error('Error reading file:', error);\r\n          return '';\r\n        }\r\n    }\r\n\r\n    saveBase64ToFile(base64Str: string, filePath: string): string {\r\n        const base64Data = base64Str.split(',')[1] || base64Str;\r\n        fs.writeFileSync(filePath, Buffer.from(base64Data, 'base64'));\r\n        return filePath;\r\n    }\r\n\r\n    writeFile(path: string, content: string): number {\r\n        let status = 0;\r\n        try {\r\n            fs.writeFileSync(path, content, 'utf8');\r\n            status = 1;\r\n        } \r\n        catch (error) { console.error('Error writing file:', error); }\r\n        return status;\r\n    }\r\n\r\n}\r\n"],"mappings":"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","names":["QRCode","os","path","fs","sharp"]}